!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react"),require("jodit")):"function"==typeof define&&define.amd?define(["react","jodit"],e):"object"==typeof exports?exports.JoditEditor=e(require("react"),require("jodit")):t.JoditEditor=e(t.React,t.jodit)}(window,function(t,e){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=2)}([function(e,o){e.exports=t},function(t,o){t.exports=e},function(t,e,o){"use strict";o.r(e);var n,r=o(0),i=o.n(r),u=o(1),c=o.n(u),f=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),s=function(t){function e(e){var o=t.call(this,e)||this;return o.oldConfig={},o.changeListener=function(t){o.state.value=t,"function"==typeof o.state.onChange&&o.state.onChange(t)},o.state={value:e.value||"",config:e.config||{},onChange:e.onChange},o.oldConfig=o.state.config,o}return f(e,t),e.prototype.componentDidMount=function(){this.createEditor()},e.prototype.createEditor=function(){this.editor&&this.editor.destruct(),this.editor=new c.a("#editor-ta",this.props.config),this.props.editorRef&&"function"==typeof this.props.editorRef&&this.props.editorRef(this.editor),this.editor.value=this.state.value,this.editor.events.on("change",this.changeListener)},e.prototype.componentWillUnmount=function(){this.editor&&this.editor.destruct()},e.prototype.componentDidUpdate=function(){this.oldConfig!==this.props.config&&(this.oldConfig=this.props.config,this.createEditor()),JSON.stringify(this.editor.value)!==JSON.stringify(this.props.value)&&(this.editor.value=this.props.value)},e.prototype.render=function(){return i.a.createElement("textarea",{ref:"element",id:"editor-ta",name:"editor-ta"})},e}(r.Component);e.default=s}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,